'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DataStore = function () {
	function DataStore(data) {
		var options = arguments.length <= 1 || arguments[1] === undefined ? { currPage: 1, pageSize: _constants.DEFAULT_PAGE_SIZE, pagination: true } : arguments[1];
		(0, _classCallCheck3.default)(this, DataStore);

		this.data = data || [];
		this.options = options;
	}

	(0, _createClass3.default)(DataStore, [{
		key: 'get',
		value: function get() {
			var _options = this.options;
			var pagination = _options.pagination;
			var currPage = _options.currPage;
			var pageSize = _options.pageSize;

			if (pagination) {
				var start = pageSize * (currPage - 1),
				    end = start + pageSize;
				return this.getSliceData(start, end);
			}
			return this.data;
		}
	}, {
		key: 'getSliceData',
		value: function getSliceData(start, end) {
			return this.data.slice(start, end);
		}
	}, {
		key: 'getAllData',
		value: function getAllData() {
			return this.data;
		}
	}, {
		key: 'set',
		value: function set(data) {
			this.data = data || [];
			return this;
		}
	}, {
		key: 'setOptions',
		value: function setOptions(options) {
			this.options = options;
		}
	}, {
		key: 'setPage',
		value: function setPage(nextPage) {
			this.options.currPage = nextPage;
			return this;
		}
	}, {
		key: 'setKeyField',
		value: function setKeyField(keyField) {
			this.options.keyField = keyField;
		}
	}, {
		key: 'getKeyField',
		value: function getKeyField() {
			return this.options.keyField;
		}
	}, {
		key: 'getDataLength',
		value: function getDataLength() {
			return this.data.length;
		}
	}, {
		key: 'isPagination',
		value: function isPagination() {
			return this.options.pagination;
		}
	}]);
	return DataStore;
}();

exports.default = DataStore;
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

exports.getTotalPages = getTotalPages;
exports.getActivePage = getActivePage;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Pagination = require('react-bootstrap/lib/Pagination');

var _Pagination2 = _interopRequireDefault(_Pagination);

var _constants = require('./constants');

var _constants2 = _interopRequireDefault(_constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getTotalPages(props) {
	var pageSize = props.pageSize;
	var total = props.total;

	return Math.ceil(total / pageSize);
}

function getActivePage(props) {
	var activePage = props.activePage;

	var pageTotals = getTotalPages(props);
	return activePage < 1 ? 1 : activePage > pageTotals ? pageTotals : activePage;
}

var Pagination = function (_React$Component) {
	(0, _inherits3.default)(Pagination, _React$Component);

	function Pagination() {
		(0, _classCallCheck3.default)(this, Pagination);
		return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Pagination).apply(this, arguments));
	}

	(0, _createClass3.default)(Pagination, [{
		key: 'render',
		value: function render() {
			var _props = this.props;
			var ellipsis = _props.ellipsis;
			var boundaryLinks = _props.boundaryLinks;
			var maxButtons = _props.maxButtons;
			var showTotalText = _props.showTotalText;
			var align = _props.align;
			var onChangePage = _props.onChangePage;
			var otherProps = (0, _objectWithoutProperties3.default)(_props, ['ellipsis', 'boundaryLinks', 'maxButtons', 'showTotalText', 'align', 'onChangePage']);
			//TODO: 是否显示数据总数

			var totalPages = getTotalPages(otherProps);

			return totalPages > 1 ? _react2.default.createElement(
				'div',
				(0, _extends3.default)({}, otherProps, {
					style: { textAlign: align },
					className: 'pagination-wapper' }),
				_react2.default.createElement(_Pagination2.default, {
					first: true,
					last: true,
					prev: true,
					next: true,
					ellipsis: ellipsis,
					boundaryLinks: boundaryLinks,
					maxButtons: maxButtons,
					items: totalPages,
					activePage: getActivePage(otherProps),
					onSelect: this.props.onChangePage })
			) : null;
		}
	}]);
	return Pagination;
}(_react2.default.Component);

Pagination.displayName = 'PaginationWapper';


Pagination.propTypes = {
	/**
  * 是否显示省略号按钮
  */
	ellipsis: _react.PropTypes.bool,
	/**
  * 当ellipsis=true && boundaryLinks=true时，显示“第一页”、“最后一页”按钮
  * @type {[type]}
  */
	boundaryLinks: _react.PropTypes.bool,
	/**
  * 最多显示的分页按钮数
  */
	maxButtons: _react.PropTypes.number,
	/**
  * 当前页
  */
	activePage: _react.PropTypes.number,
	/**
  * 分页大小
  */
	pageSize: _react.PropTypes.number,
	/**
  * 数据总数
  */
	total: _react.PropTypes.number,
	/**
  * 是否显示数据总数
  */
	showTotalText: _react.PropTypes.bool,
	/**
  * 分页按钮的对齐方式，right or left
  */
	align: _react.PropTypes.oneOf((0, _values2.default)(_constants2.default.PAGINATION_ALIGN)),
	/**
  * 点击分页按钮时的回调事件
  */
	onChangePage: _react.PropTypes.func
};

Pagination.defaultProps = {
	ellipsis: true,
	boundaryLinks: false,
	maxButtons: 5,
	activePage: 1,
	pageSize: _constants2.default.DEFAULT_PAGE_SIZE,
	total: 0,
	showTotalText: false,
	align: _constants2.default.PAGINATION_ALIGN.RIGHT
};

exports.default = Pagination;
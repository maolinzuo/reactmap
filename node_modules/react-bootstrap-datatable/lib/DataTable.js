'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _dataStore = require('./dataStore');

var _dataStore2 = _interopRequireDefault(_dataStore);

var _Pagination = require('./Pagination');

var _Pagination2 = _interopRequireDefault(_Pagination);

var _constants = require('./constants');

var _constants2 = _interopRequireDefault(_constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DataTable = function (_React$Component) {
	(0, _inherits3.default)(DataTable, _React$Component);

	function DataTable(props) {
		(0, _classCallCheck3.default)(this, DataTable);

		var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(DataTable).call(this, props));

		_this.store = new _dataStore2.default();
		_this.initOptions(true, props);
		return _this;
	}

	(0, _createClass3.default)(DataTable, [{
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			this.initOptions(false, nextProps);
		}
	}, {
		key: 'initOptions',
		value: function initOptions(init, props) {
			var _this2 = this;

			var data = props.data;
			var dataFields = props.dataFields;
			var selection = props.selection;

			var paginationProps = this.getPaginationProps(props);
			var currPage = (0, _Pagination.getActivePage)(paginationProps);
			var selectedRows = [];
			var keyField = void 0;

			if (!dataFields || !Array.isArray(dataFields) || dataFields.length <= 0) {
				throw 'Error. 属性 {dataFields} 必传，且不为空数组。';
			}

			dataFields.forEach(function (field) {
				if (field.idField) {
					if (keyField) {
						throw 'Error. 属性 {dataFields.idField} 只能设一个值。';
					}
					keyField = field.name;
				}
			});

			if (!keyField) {
				throw 'Error. 属性 {dataFields.idField} 需要设一个值。';
			}

			if (data.length > 0 && selection && selection.selected) {

				switch (selection.mode) {
					case _constants2.default.SELECTION_MODE.SINGLE:
						if (typeof selection.selected !== 'number' && typeof selection.selected !== 'string') {
							throw 'Error. 属性 {selection.mode} 为single时，{selection.selected} 的值须为 number || string';
						}
						selectedRows = [selection.selected];
						break;
					case _constants2.default.SELECTION_MODE.MULTIPLE:
						if (!Array.isArray(selection.selected)) {
							throw 'Error. 属性 {selection.mode} 为multiple时，{selection.selected} 的值须为 array';
						}
						selectedRows = selection.selected;
						break;
				}

				//如果传递了不存在的keyFieldValue，会导致selectedRows中有多余的数据，可能会出现全选无法正确的自动选上的问题，这里对selectedRows进行过滤
				selectedRows = selectedRows.filter(function (keyFieldValue) {
					return _this2.filterKeyFieldValue(keyField, keyFieldValue, data);
				});
			}

			this.store.set(data).setOptions({
				pagination: props.pagination && props.pagination.local,
				currPage: currPage,
				pageSize: paginationProps.pageSize,
				keyField: keyField
			});

			var state = {
				data: this.store.setPage(currPage).get(),
				currPage: currPage,
				selectAll: false,
				selectedRows: selectedRows
			};

			init ? this.state = state : this.setState(state);
		}
	}, {
		key: 'filterKeyFieldValue',
		value: function filterKeyFieldValue(keyField, keyFieldValue, data) {
			var result = false;
			data.forEach(function (d) {
				if (d[keyField] === keyFieldValue) {
					result = true;
					return false;
				}
			});
			return result;
		}
	}, {
		key: 'getKeyField',
		value: function getKeyField() {
			return this.store.getKeyField();
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'div',
				{ className: 'data-table-wapper' },
				this.renderDataTable(),
				this.renderPagination()
			);
		}
	}, {
		key: 'renderDataTable',
		value: function renderDataTable() {
			var _props = this.props;
			var striped = _props.striped;
			var bordered = _props.bordered;
			var hover = _props.hover;
			var serialNumber = _props.serialNumber;
			var dataFields = _props.dataFields;
			var data = _props.data;
			var rowTemplate = _props.rowTemplate;
			var emptyText = _props.emptyText;
			var pagination = _props.pagination;
			var selection = _props.selection;
			var children = _props.children;
			var otherProps = (0, _objectWithoutProperties3.default)(_props, ['striped', 'bordered', 'hover', 'serialNumber', 'dataFields', 'data', 'rowTemplate', 'emptyText', 'pagination', 'selection', 'children']);

			var classes = {
				'data-table': true,
				'table': true,
				'table-striped': striped,
				'table-bordered': bordered,
				'table-hover': hover
			};

			return _react2.default.createElement(
				'table',
				(0, _extends3.default)({}, otherProps, {
					ref: 'table',
					className: (0, _classnames2.default)(classes, this.props.className) }),
				this.renderTableHead(),
				this.renderTableBody()
			);
		}
	}, {
		key: 'renderTableHead',
		value: function renderTableHead() {
			var _props2 = this.props;
			var serialNumber = _props2.serialNumber;
			var serialNumberHead = _props2.serialNumberHead;
			var dataFields = _props2.dataFields;
			var selection = _props2.selection;

			var selectionProps = selection || {};

			return _react2.default.createElement(
				'thead',
				null,
				_react2.default.createElement(
					'tr',
					null,
					this.renderSelectionColumn(true, 'all'),
					this.renderSerialNumberColumn(true, serialNumberHead),
					dataFields.map(function (field) {
						return field.idField ? null : _react2.default.createElement(
							'th',
							{ key: field.name || 'custom-column' },
							field.text
						);
					})
				)
			);
		}
	}, {
		key: 'renderSelectionColumn',
		value: function renderSelectionColumn(isHead, key) {
			var selection = this.props.selection;

			var ElementType = isHead ? 'th' : 'td';
			var classes = 'cell-selection';
			var checked = isHead ? this.state.selectAll : this.state.selectedRows.indexOf(key) !== -1;

			if (selection) {

				switch (selection.mode) {
					case _constants2.default.SELECTION_MODE.SINGLE:
						return _react2.default.createElement(
							ElementType,
							{ className: classes },
							' ',
							isHead ? null : _react2.default.createElement('input', { key: key, type: 'radio', checked: checked, onChange: this.handleCheckInput.bind(this) })
						);
					case _constants2.default.SELECTION_MODE.MULTIPLE:
						return _react2.default.createElement(
							ElementType,
							{ className: classes },
							_react2.default.createElement('input', { key: key, type: 'checkbox', checked: checked, onChange: isHead ? this.handleSelectAll.bind(this) : this.handleCheckInput.bind(this) })
						);
					default:
						throw 'Error. 属性 {selection.mode} 必须为single || multiple.';
				}
			}

			return null;
		}
	}, {
		key: 'handleSelectAll',
		value: function handleSelectAll(event) {
			var selection = this.props.selection;

			var checked = event.currentTarget.checked;
			var keyField = this.getKeyField();

			this.setState({
				selectAll: checked,
				selectedRows: checked ? this.state.data.map(function (item) {
					return item[keyField];
				}) : []
			});

			selection.onSelectAll && selection.onSelectAll(checked);
		}
	}, {
		key: 'handleSelectRow',
		value: function handleSelectRow(event) {
			var selection = this.props.selection;

			var keyField = this.getKeyField();

			if (selection && selection.clickToSelect === true) {
				var rowIndex = event.currentTarget.rowIndex - 1,
				    rowData = this.state.data[rowIndex],
				    checked = this.state.selectedRows.indexOf(rowData[keyField]) === -1;
				this.handleToggleInput(rowIndex, checked);
			}
		}
	}, {
		key: 'handleCheckInput',
		value: function handleCheckInput(event) {
			var target = event.currentTarget,
			    checked = target.checked,
			    rowIndex = target.parentElement.parentElement.rowIndex - 1; //tr.rowIndex会把<thead><tr></tr></thead>的行也计算在内

			this.handleToggleInput(rowIndex, checked);
		}
	}, {
		key: 'handleToggleInput',
		value: function handleToggleInput(rowIndex, checked) {
			var selection = this.props.selection;var data = this.state.data;var rowData = data[rowIndex];var keyField = this.getKeyField();
			var selectedRows = [];

			if (selection.mode === _constants2.default.SELECTION_MODE.SINGLE) {
				selectedRows.push(rowData[keyField]);
			} else {
				selectedRows = this.state.selectedRows.slice();
				checked ? selectedRows.push(rowData[keyField]) : selectedRows = selectedRows.filter(function (item) {
					return item !== rowData[keyField];
				});
			}

			this.setState({
				selectAll: selectedRows.length === data.length,
				selectedRows: selectedRows
			});

			selection.onSelect && selection.onSelect(checked, rowData);
		}
	}, {
		key: 'renderSerialNumberColumn',
		value: function renderSerialNumberColumn(isHead, cellText) {
			var ElementType = isHead ? 'th' : 'td';
			return this.props.serialNumber ? _react2.default.createElement(
				ElementType,
				{ key: 'no', className: 'cell-no' },
				cellText
			) : null;
		}
	}, {
		key: 'renderTableBody',
		value: function renderTableBody() {
			var _this3 = this;

			var _props3 = this.props;
			var serialNumber = _props3.serialNumber;
			var dataFields = _props3.dataFields;
			var rowTemplate = _props3.rowTemplate;
			var emptyText = _props3.emptyText;
			var selection = _props3.selection;

			var data = this.state.data;

			if (!data || !Array.isArray(data) || data.length <= 0) {
				return this.renderEmptyText();
			}

			if (rowTemplate) {
				return this.renderTableBodyForRowTemplate();
			}

			var classes = {
				'row-selection': selection && selection.clickToSelect
			};

			var keyField = this.getKeyField();

			return _react2.default.createElement(
				'tbody',
				null,
				data.map(function (item, index) {
					return _react2.default.createElement(
						'tr',
						{ className: (0, _classnames2.default)(classes), key: 'row' + index, onClick: _this3.handleSelectRow.bind(_this3) },
						_this3.renderSelectionColumn(false, item[keyField]),
						_this3.renderSerialNumberColumn(false, ++index),
						dataFields.map(function (field) {
							return field.idField ? null : _react2.default.createElement(
								'td',
								{ key: field.name || 'custom-column' },
								item[field.name] || field.value || ''
							);
						})
					);
				})
			);
		}
	}, {
		key: 'renderEmptyText',
		value: function renderEmptyText() {
			var _props4 = this.props;
			var dataFields = _props4.dataFields;
			var serialNumber = _props4.serialNumber;
			var selection = _props4.selection;
			var emptyText = _props4.emptyText;

			var columns = dataFields.length;

			serialNumber && ++columns;
			selection && ++columns;

			return _react2.default.createElement(
				'tbody',
				null,
				_react2.default.createElement(
					'tr',
					null,
					_react2.default.createElement(
						'td',
						{ colSpan: columns, className: 'empty-text' },
						emptyText
					)
				)
			);
		}
	}, {
		key: 'renderTableBodyForRowTemplate',
		value: function renderTableBodyForRowTemplate() {
			var _this4 = this;

			var _props5 = this.props;
			var serialNumber = _props5.serialNumber;
			var dataFields = _props5.dataFields;
			var rowTemplate = _props5.rowTemplate;
			var selection = _props5.selection;

			var data = this.state.data;

			//校验模板是否为 <tr><td></td></tr> 格式
			if (rowTemplate.type !== 'tr') {
				throw 'Error. 行模板 {rowTemplate} 必须为<tr><td></td></tr>元素';
			}

			var cells = rowTemplate.props.children;

			//校验模板中，其TD数量是否和dataFields长度一致
			if (!cells || cells.length !== dataFields.length) {
				throw 'Error. 模板的列数必须和属性 {dataFields} 对应上';
			}

			cells.forEach(function (cell) {
				if (cell.type !== 'td') {
					throw 'Error. 行模板 {rowTemplate} 必须为<tr><td></td></tr>元素';
				}
			});

			var classes = {
				'row-selection': selection && selection.clickToSelect
			};

			var renderChildrenNode = function renderChildrenNode(parent, child, data) {
				if (typeof child === 'string') {
					//当children为string时，把数据占位符%%替换成真实数据
					return child.replace(/%\w*%/g, function (key) {
						return data[key.replace(/%/g, '')] || '';
					});
				} else if ((0, _react.isValidElement)(child)) {
					//child为element时，递归调用renderChildrenNode，对所有children的%%数据占位符替换成真实数据。然后return clone后的element
					var node = renderChildrenNode(child, child.props.children, data);
					return (0, _react.cloneElement)(child, { children: node });
				}

				return child;
			};

			var keyField = this.getKeyField();

			return _react2.default.createElement(
				'tbody',
				null,
				data.map(function (dataItem, rowIndex) {
					return _react2.default.createElement(
						'tr',
						{ className: (0, _classnames2.default)(classes), key: 'row' + rowIndex, onClick: _this4.handleSelectRow.bind(_this4) },
						_this4.renderSelectionColumn(false, dataItem[keyField]),
						_this4.renderSerialNumberColumn(false, ++rowIndex),
						dataFields.map(function (field, cellIndex) {
							var _cells$cellIndex$prop = cells[cellIndex].props;
							var children = _cells$cellIndex$prop.children;
							var childrenNode = _cells$cellIndex$prop.childrenNode;
							var otherProps = (0, _objectWithoutProperties3.default)(_cells$cellIndex$prop, ['children', 'childrenNode']);


							if (field.idField === true) {
								//idField为ID标识列，这里直接返回null，暂不作其它处理
								return null;
							}

							if (childrenNode && typeof childrenNode !== 'function') {
								throw 'Error. TD的属性 {childrenNode} 必须为function';
							}

							var column = _react2.default.createElement('td', (0, _extends3.default)({}, otherProps, { key: field.name || 'custom-column' }));

							//如果该列传递了childrenNode，直接调用它得到TD的children
							var columnChildren = childrenNode ? childrenNode(dataItem || {}) : renderChildrenNode(column, children, dataItem || {});

							return (0, _react.cloneElement)(column, { children: columnChildren });
						})
					);
				})
			);
		}
	}, {
		key: 'renderPagination',
		value: function renderPagination() {
			var pagination = this.props.pagination;

			return pagination ? _react2.default.createElement(_Pagination2.default, (0, _extends3.default)({}, pagination, {
				activePage: this.state.currPage,
				onChangePage: pagination.local ? this.handleChangePage.bind(this) : pagination.onChangePage })) : null;
		}
	}, {
		key: 'handleChangePage',
		value: function handleChangePage(event, selectedEvent) {
			var currPage = selectedEvent.eventKey;

			this.setState({
				data: this.store.setPage(currPage).get(),
				currPage: currPage
			});
		}
	}, {
		key: 'getPaginationProps',
		value: function getPaginationProps(props) {
			return (props || this.props).pagination || _Pagination2.default.defaultProps;
		}

		/**
   * 获取当前页已选择的行数据
   * 该方法如果在this.props.selection.onSelect()中即时调用，由于state还没更新，这里的数据将会是历史的脏数据
   */

	}, {
		key: 'getSelectedDatas',
		value: function getSelectedDatas() {
			var selectedRows = this.state.selectedRows;

			var keyField = this.getKeyField();
			return this.store.getAllData().filter(function (item) {
				return selectedRows.indexOf(item[keyField]) !== -1;
			});
		}
	}]);
	return DataTable;
}(_react2.default.Component);

DataTable.propTypes = {
	/**
  * 是否隔行着色
  */
	striped: _react.PropTypes.bool,
	/**
  * 是否显示border
  */
	bordered: _react.PropTypes.bool,
	/**
  * 是否在hover时，改变行背景色
  */
	hover: _react.PropTypes.bool,
	/**
  * 是否添加序号列
  */
	serialNumber: _react.PropTypes.bool,
	/**
  * 序号列头显示的TEXT
  */
	serialNumberHead: _react.PropTypes.string,
	/**
  * 用于解析data数据的field标识
  */
	dataFields: _react.PropTypes.array.isRequired,
	/**
  * 用于生成DataTable的源数据
  */
	data: _react.PropTypes.array,
	/**
  * 用于生成DataTable的行模板，格式为 <tr><td></td></tr>
  */
	rowTemplate: _react.PropTypes.element,
	/**
  * 没有数据时，显示的提示信息
  */
	emptyText: _react.PropTypes.string,
	/**
  * 是否添加分页条
  * 
  * pagination: {
  *   ellipsis: bool,
  *   boundaryLinks: bool,
  *   maxButtons: number,
  *   activePage: number,
  *   pageSize: number,
  *   total: number,
  *   showTotalText: bool,
  *   align: 'right' || 'left',
  *   local: bool,
  *   onChangePage: func
  * }
  */
	pagination: _react.PropTypes.object,
	/**
  * 是否添加行选择，single或multiple
  * 
  * selection: {
  *   mode: 'single' || 'multiple',
  *   selected: number || string || array,
  *   clickToSelect: bool,
  *   onSelect: func,
  *   onSelectAll: func
  * }
  */
	selection: _react.PropTypes.object
};

DataTable.defaultProps = {
	data: [],
	striped: false,
	bordered: true,
	hover: false,
	serialNumber: false,
	serialNumberHead: _constants2.default.SN_HEAD_TEXT,
	emptyText: _constants2.default.EMPTY_TEXT
};

exports.default = DataTable;